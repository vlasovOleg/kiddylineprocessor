// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: subscribe.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Sports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sports []string `protobuf:"bytes,1,rep,name=Sports,proto3" json:"Sports,omitempty"`
	Time   int32    `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Sports) Reset() {
	*x = Sports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscribe_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sports) ProtoMessage() {}

func (x *Sports) ProtoReflect() protoreflect.Message {
	mi := &file_subscribe_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sports.ProtoReflect.Descriptor instead.
func (*Sports) Descriptor() ([]byte, []int) {
	return file_subscribe_proto_rawDescGZIP(), []int{0}
}

func (x *Sports) GetSports() []string {
	if x != nil {
		return x.Sports
	}
	return nil
}

func (x *Sports) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type Coefficients struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coefficients map[string]float32 `protobuf:"bytes,1,rep,name=Coefficients,proto3" json:"Coefficients,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *Coefficients) Reset() {
	*x = Coefficients{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscribe_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coefficients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coefficients) ProtoMessage() {}

func (x *Coefficients) ProtoReflect() protoreflect.Message {
	mi := &file_subscribe_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coefficients.ProtoReflect.Descriptor instead.
func (*Coefficients) Descriptor() ([]byte, []int) {
	return file_subscribe_proto_rawDescGZIP(), []int{1}
}

func (x *Coefficients) GetCoefficients() map[string]float32 {
	if x != nil {
		return x.Coefficients
	}
	return nil
}

var File_subscribe_proto protoreflect.FileDescriptor

var file_subscribe_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x22, 0x34, 0x0a, 0x06, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x01, 0x0a,
	0x0c, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x47, 0x0a,
	0x0c, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x48, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x4f, 0x6e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x0b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x11, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x28, 0x01, 0x30,
	0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_subscribe_proto_rawDescOnce sync.Once
	file_subscribe_proto_rawDescData = file_subscribe_proto_rawDesc
)

func file_subscribe_proto_rawDescGZIP() []byte {
	file_subscribe_proto_rawDescOnce.Do(func() {
		file_subscribe_proto_rawDescData = protoimpl.X.CompressGZIP(file_subscribe_proto_rawDescData)
	})
	return file_subscribe_proto_rawDescData
}

var file_subscribe_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_subscribe_proto_goTypes = []interface{}{
	(*Sports)(nil),       // 0: api.Sports
	(*Coefficients)(nil), // 1: api.Coefficients
	nil,                  // 2: api.Coefficients.CoefficientsEntry
}
var file_subscribe_proto_depIdxs = []int32{
	2, // 0: api.Coefficients.Coefficients:type_name -> api.Coefficients.CoefficientsEntry
	0, // 1: api.Processor.SubscribeOnSportLines:input_type -> api.Sports
	1, // 2: api.Processor.SubscribeOnSportLines:output_type -> api.Coefficients
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_subscribe_proto_init() }
func file_subscribe_proto_init() {
	if File_subscribe_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_subscribe_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscribe_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coefficients); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_subscribe_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_subscribe_proto_goTypes,
		DependencyIndexes: file_subscribe_proto_depIdxs,
		MessageInfos:      file_subscribe_proto_msgTypes,
	}.Build()
	File_subscribe_proto = out.File
	file_subscribe_proto_rawDesc = nil
	file_subscribe_proto_goTypes = nil
	file_subscribe_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProcessorClient is the client API for Processor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProcessorClient interface {
	SubscribeOnSportLines(ctx context.Context, opts ...grpc.CallOption) (Processor_SubscribeOnSportLinesClient, error)
}

type processorClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessorClient(cc grpc.ClientConnInterface) ProcessorClient {
	return &processorClient{cc}
}

func (c *processorClient) SubscribeOnSportLines(ctx context.Context, opts ...grpc.CallOption) (Processor_SubscribeOnSportLinesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Processor_serviceDesc.Streams[0], "/api.Processor/SubscribeOnSportLines", opts...)
	if err != nil {
		return nil, err
	}
	x := &processorSubscribeOnSportLinesClient{stream}
	return x, nil
}

type Processor_SubscribeOnSportLinesClient interface {
	Send(*Sports) error
	Recv() (*Coefficients, error)
	grpc.ClientStream
}

type processorSubscribeOnSportLinesClient struct {
	grpc.ClientStream
}

func (x *processorSubscribeOnSportLinesClient) Send(m *Sports) error {
	return x.ClientStream.SendMsg(m)
}

func (x *processorSubscribeOnSportLinesClient) Recv() (*Coefficients, error) {
	m := new(Coefficients)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessorServer is the server API for Processor service.
type ProcessorServer interface {
	SubscribeOnSportLines(Processor_SubscribeOnSportLinesServer) error
}

// UnimplementedProcessorServer can be embedded to have forward compatible implementations.
type UnimplementedProcessorServer struct {
}

func (*UnimplementedProcessorServer) SubscribeOnSportLines(Processor_SubscribeOnSportLinesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOnSportLines not implemented")
}

func RegisterProcessorServer(s *grpc.Server, srv ProcessorServer) {
	s.RegisterService(&_Processor_serviceDesc, srv)
}

func _Processor_SubscribeOnSportLines_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProcessorServer).SubscribeOnSportLines(&processorSubscribeOnSportLinesServer{stream})
}

type Processor_SubscribeOnSportLinesServer interface {
	Send(*Coefficients) error
	Recv() (*Sports, error)
	grpc.ServerStream
}

type processorSubscribeOnSportLinesServer struct {
	grpc.ServerStream
}

func (x *processorSubscribeOnSportLinesServer) Send(m *Coefficients) error {
	return x.ServerStream.SendMsg(m)
}

func (x *processorSubscribeOnSportLinesServer) Recv() (*Sports, error) {
	m := new(Sports)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Processor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Processor",
	HandlerType: (*ProcessorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeOnSportLines",
			Handler:       _Processor_SubscribeOnSportLines_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "subscribe.proto",
}
